services:
  backup:
    image: postgres:15
    restart: unless-stopped
    env_file:
      - stack.env
    volumes:
      - /mnt/sda/backups/financer:/backups
    environment:
      TZ: "America/Sao_Paulo"
    entrypoint: |
      /bin/sh -c '
      while true; do
        echo "Starting backup at $(date)"
        PGPASSWORD=$$POSTGRES_PASSWORD pg_dump -h $${POSTGRES_HOST:-postgres} -U $$POSTGRES_USER $$POSTGRES_DB | gzip > /backups/backup_$${POSTGRES_DB}_$(date +%Y%m%d_%H%M%S).sql.gz
        echo "Backup completed at $(date)"
        # Keep only last 4 backups
        ls -t /backups/backup_$${POSTGRES_DB}_*.sql.gz | tail -n +5 | xargs -r rm
        sleep $${BACKUP_INTERVAL:-604800}
      done'
    networks:
      - financer-services_database

  s3-uploader:
    image: alpine:latest
    restart: unless-stopped
    env_file:
      - stack.env
    volumes:
      - /mnt/sda/backups/financer:/backups
      - ./sync-script.sh:/sync-script.sh:ro
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -e  # Exit on any error

        echo "=== Starting S3 sync script ==="
        echo "Current directory: $(pwd)"
        echo "Script location: $0"

        apk add --no-cache aws-cli inotify-tools bash || {
          echo "Failed to install packages" >&2
          exit 1
        }

        echo "S3_BUCKET is: $$S3_BUCKET"

        # Check if S3_BUCKET is set
        if [ -z "$$S3_BUCKET" ]; then
          echo "ERROR: S3_BUCKET environment variable is not set!" >&2
          exit 1
        fi

        # Check if backups directory exists
        if [ ! -d "/backups" ]; then
          echo "ERROR: /backups directory does not exist!" >&2
          exit 1
        fi

        sync_backups() {
          echo "=== Syncing backups to S3 ==="
          echo "Command: aws s3 sync /backups s3://$$S3_BUCKET/ --include backup_*.sql.gz --exclude *"
          if aws s3 sync /backups s3://$$S3_BUCKET/ --include "backup_*.sql.gz" --exclude "*"; then
            echo "Sync completed"
          else
            echo "Sync FAILED" >&2
          fi
        }

        echo "=== Performing initial sync ==="
        sync_backups || {
          echo "Initial sync failed, but continuing..." >&2
        }

        echo "=== Starting file watcher ==="
        inotifywait -m -e close_write /backups --format "%f" | while read filename; do
          if [[ "$$filename" == backup_*.sql.gz ]]; then
            echo "New backup detected: $$filename"
            sync_backups || echo "Sync failed for $$filename" >&2
          else
            echo "Ignoring file: $$filename"
          fi
        done

networks:
  financer-services_database:
    external: true
