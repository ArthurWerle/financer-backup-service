services:
  backup:
    image: postgres:15
    restart: unless-stopped
    env_file:
      - stack.env
    volumes:
      - /mnt/sda/backups/financer:/backups
    environment:
      TZ: "America/Sao_Paulo"
    entrypoint: |
      /bin/sh -c '
      while true; do
        echo "Starting backup at $(date)"
        PGPASSWORD=$$POSTGRES_PASSWORD pg_dump -h $${POSTGRES_HOST:-postgres} -U $$POSTGRES_USER $$POSTGRES_DB | gzip > /backups/backup_$${POSTGRES_DB}_$(date +%Y%m%d_%H%M%S).sql.gz
        echo "Backup completed at $(date)"
        # Keep only last 4 backups
        ls -t /backups/backup_$${POSTGRES_DB}_*.sql.gz | tail -n +5 | xargs -r rm
        sleep $${BACKUP_INTERVAL:-604800}
      done'
    networks:
      - financer-services_database

  s3-uploader:
    image: alpine:latest
    restart: unless-stopped
    env_file:
      - stack.env
    volumes:
      - /mnt/sda/backups/financer:/backups
    entrypoint: |
      /bin/sh -c '
      apk add --no-cache aws-cli inotify-tools bash

      BUCKET="$$S3_BUCKET"
      echo "S3_BUCKET is: $BUCKET"


      # Function to sync backups
      sync_backups() {
        echo "Syncing backups to S3..."
        echo "Full command: aws s3 sync /backups s3://$BUCKET/ --include backup_*.sql.gz --exclude *"
        echo "Files in /backups:"
        ls -la /backups/

        if aws s3 sync /backups s3://$BUCKET/ \
          --include "backup_*.sql.gz" \
          --exclude "*" \
          --debug; then
          echo "Sync completed"
        else
          echo "Sync FAILED" >&2
        fi
      }

      # Initial sync on startup
      sync_backups

      # Watch for new files and sync
      inotifywait -m -e close_write /backups --format "%f" | while read filename; do
        if [[ "$$filename" == backup_*.sql.gz ]]; then
          echo "New backup detected: $$filename"
          sleep 2  # Wait a bit to ensure file is completely written
          sync_backups
        fi
      done'

networks:
  financer-services_database:
    external: true
